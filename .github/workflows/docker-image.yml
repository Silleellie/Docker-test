name: Docker Image CI
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    
jobs:
  main:
    runs-on: ubuntu-latest

    steps:
      - 
       name: Checkout 
       uses: actions/checkout@v2
       with:
          fetch-depth: 0
      - 
        id: check
        name: Check File Changed
        run: |
              FILE_CHANGED=$(git diff --name-only HEAD^ HEAD)
              
              for i in $FILE_CHANGED ; do
                if [[ $file == */Dockerfile ]] || [[ $file == */docker-image.yml ]]; then
                  echo "::set-output name=run_step::true"
                  break
                else
                  echo "Non Ã¨ necessario buildare l'immagine Docker"
                  echo "::set-output name=run_step::true"
                fi
              done
#       -
#        id: files
#        uses: jitterbit/get-changed-files@v1
#        with:
#           format: 'csv'
#       -
#         name: Prova 
#         run: |
#             mapfile -d ',' -t added_modified_files < <(printf '%s,' '${{ steps.files.outputs.added_modified }}')
#             for added_modified_file in "${added_modified_files[@]}"; do
#               echo "Do something with this ${added_modified_file}."
#             done
      -
        name: fai se
        if: ${{ steps.check.outputs.run_step }} == "true"
        run: |
            echo ${{ steps.check.outputs.run_step }}
#       - 
#         name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v1
# #       - 
#         name: Login to DockerHub
#         uses: docker/login-action@v1 
#         with:
#             username: ${{ secrets.DOCKER_USERNAME }}
#             password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
#       -
#         name: Build
#         id: docker_build
#         uses: docker/build-push-action@v2
#         with:
#           context: ${{ github.WORKSPACE }}
#           file:  Dockerfile/Dockerfile
#           load: true
#           tags: ${{ secrets.DOCKER_USERNAME }}/prova:latest
#       -
#         name: Push
#         run: docker push ${{ secrets.DOCKER_USERNAME }}/prova:latest
#       -
#          name: Test
#          run:
#                | 
#                 container_id=$(docker run -d -i -t -v ${pwd}:/usr/src ${{ secrets.DOCKER_USERNAME }}/prova)
#                 echo "ls del container"
#                 docker exec -i $container_id ls
#                 docker stop $container_id
#                 docker container rm $container_id
